## primary key
- 레코드를 구별하기 위한 키

## index
- 데이터의 순서를 미리 정렬해서 저장할 때 사용(빠르게 조회가능)

## 데이터베이스 프로그래밍의 일반적인 순서
1. dbms 클라이언트 -> dbms 연결
2. dbms 클라이언트 -> dbms 명령어 전송(sql 실행)
3. dbms -> dbms 클라이언트 : 결과 전송
4. dbms 클라이언트 -> dbms : 연결종료

## JDBC의 구조

자바 어플리케이션 -> JDBC API -> JDBC 드라이버 -> db

### JDBC 사용 순서
1. JDBC 드라이버 로딩
2. 데이터베이스 커넥션 구함
3. 쿼리 실행을 위한 Statement 객체 생성
4. 쿼리 실행
5. 쿼리 실행 결과 사용
6. Statement 종료
7. 데이터베이스 커넥션 종료


## 커넥션이란?
- 애플리케이션과 데이터베이스의 연결의 뜻하는 것으로, 애플리케이션에서 데이터베이스에 접속하고 접속을 종료하는 일련의 과정

## JDBC 트랜잭션 처리

1. JDBC의 오토 커밋 모드를 false로 지정
2. JTA(Java Transaction API)를 이용

### JTA 설명
- XA 리소스(ex: db) 간의 분산 트랜잭션을 처리하는 JAVA API다.

## 커넥션 풀이란?
- pool 속에 커넥션을 미리 만들어 저장해 두고 필요할 때 커넥션을 풀에서 가져다 쓰고 다시 풀에 반환 방법이다.

### 커넥션 풀(DBCP) 특징
- 웹 컨테이너가 실행되면서 커넥션 객체를 미리 pool에 생성
- http 요청에 따라 pool에서 커넥션 객체를 가져다 쓰고 반환
- pool에 미리 커넥션이 생성되어 있기 때문에 커넥션을 생성하는데 드는 요청마다 연결 시간이 소비되지 않는다.
- 커넥션을 계속해서 재사용하기 때문에 생성되는 커넥션 수를 제한적으로 설정

### 동시 접속자가 많을 경우
- pool이 비어 있는ㄴ 경우 커넥션이 반환할 때까지 번호순으로 대기

### 커넥션 풀의 속성

1. maxActice : 커넥션 풀이 제공할 최대 커넥션 개수
2. maxIdle : 커넥션 풀에 반납할 떄 최대로 유지할 수 있는 커넥션 개수(default : 8)
3. minIdle : 최소한으로 유지할 커넥션 개수 (default : 0)

